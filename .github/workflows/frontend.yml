name: web

on:
    push:
        branches:
            - master
            - staging
            - trying
    pull_request:
        paths:
            - '**.js'
            - '**.vue'
            - '**.json'
            - '**.css'

jobs:
    prettier:
        name: prettier
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v2
            -   uses: actions/setup-node@v1
                with:
                    node-version: '13.x'
            -   id: yarn-cache-dir-path
                run: echo "::set-output name=dir::$(yarn cache dir)"
            -   uses: actions/cache@v1
                id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
                with:
                    path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                    key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-yarn-
            -   run: yarn --frozen-lockfile
            -   run: yarn lint:check

    build:
        name: build
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v2
            -   uses: actions/setup-node@v1
                with:
                    node-version: '13.x'
            -   id: yarn-cache-dir-path
                run: echo "::set-output name=dir::$(yarn cache dir)"
            -   uses: actions/cache@v1
                id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
                with:
                    path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                    key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-yarn-
            -   run: yarn --frozen-lockfile
            -   run: yarn build:prod

    deploy:
        name: deploy
        runs-on: self-hosted
        needs: [prettier,build]
        steps:
            -   name: start deployment
                uses: bobheadxi/deployments@master
                id: deployment
                with:
                    step: start
                    token: ${{ secrets.GITHUB_TOKEN }}
                    env: staging
            -   run: docker service update --with-registry-auth journali-staging_web
            -   name: update deployment status
                uses: bobheadxi/deployments@master
                if: always()
                with:
                    step: finish
                    token: ${{ secrets.GITHUB_TOKEN }}
                    status: ${{ job.status }}
                    env_url: 'http://staging.journali.nl'
                    deployment_id: ${{ steps.deployment.outputs.deployment_id }}
